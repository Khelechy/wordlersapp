@page "/room/game"
@using Microsoft.AspNetCore.SignalR.Client;
@using WordlersWeb.Helpers
@layout MainLayout
@inject IJSRuntime Js




<PageTitle>Game Room</PageTitle>

<style>
    .chat-page-wrapper {
        position: fixed;
        top: 0;
        left: 0;
        right: 0;
        bottom: 0;
        overflow: hidden;
        background: var(--mud-palette-background);
    }

    .chat-container {
        height: 100vh;
        height: 100dvh;
        position: relative;
        display: flex;
        flex-direction: column;
        overflow: hidden;
    }

    .game-header {
        position: fixed;
        top: 60px; /* Height of MudAppBar */
        left: 0;
        right: 0;
        background-color: #32333D;
        padding: 12px 16px;
        box-shadow: 0 2px 4px rgba(0,0,0,0.1);
        z-index: 200;
        height: 90px; /* Fixed height */
    }

    .messages-area {
        position: fixed;
        top: 150px; /* AppBar (60px) + GameHeader (60px) */
        left: 0;
        right: 0;
        bottom: 80px; /* Space for input area */
        overflow-y: auto; /* ONLY this scrolls */
        overflow-x: hidden;
        padding: 16px;
        -webkit-overflow-scrolling: touch;
        background: transparent;
    }

    .fixed-input {
        position: fixed;
        bottom: 10px;
        left: 0;
        right: 0;
        z-index: 1000;
        background: #32323c;
        padding: 12px;
        box-shadow: 0 -2px 4px rgba(0,0,0,0.1);
        height: 56px; /* Fixed height */
    }

    /* Prevent zoom on input focus for mobile - inline styles will handle this */
    .mobile-input input {
        font-size: 16px !important;
    }

    /* Ensure MudAppBar stays fixed - but don't override too aggressively */
    .mud-appbar {
        position: fixed !important;
        top: 0 !important;
        left: 0 !important;
        right: 0 !important;
        z-index: 1300 !important;
        height: 64px !important;
    }

    /* Only override container styles for this specific page */
    .chat-page-wrapper .mud-container {
        padding: 0 !important;
        margin: 0 !important;
        max-width: none !important;
        height: 100%;
    }

    .chat-page-wrapper .mud-main-content {
        padding: 0 !important;
        margin: 0 !important;
        overflow: hidden !important;
        height: 100%;
    }
</style>

<div class="chat-page-wrapper">
    <div class="chat-container">
        <!-- Fixed Header -->

        <div class="game-header">
            <div style="display: flex; justify-content: space-between; align-items: center; width: 100%;">
                <MudButton Variant="Variant.Filled" OnClick="ProcessStartGame"
                           Disabled="!isGameOwner" Color="Color.Primary" Size="Size.Small">
                    Start Game
                </MudButton>
            </div>
            @if (!string.IsNullOrEmpty(OriginalWord))
            {
                <MudText Align="Align.Center" Class="mt-4" Color="Color.Tertiary">
                    *@OriginalWord*
                </MudText>
            }
        </div>

        <!-- Messages Content Area -->
        <div id="messages-container" class="messages-area">
            @if (messages.Count > 0)
            {
                <MudList>
                    @foreach (var message in messages)
                    {
                        <MudListItem>
                            <MudText>@message</MudText>
                        </MudListItem>
                        <MudDivider DividerType="DividerType.Middle" />
                    }
                </MudList>
            }
            else
            {
                <MudText Align="Align.Center" Class="mt-8" Color="Color.Tertiary">
                    No messages yet...
                </MudText>
            }
        </div>

        <!-- Fixed Input Area -->
        <div class="fixed-input">
            <MudStack Row="true" Spacing="2">
                <MudTextField @ref="inputBoxReference"
                              @bind-Value="InputMessage"
                              Immediate="true"
                              @onkeydown="@Enter"
                              @onfocus="HandleInputFocus"
                              @onblur="HandleInputBlur"
                              Label=""
                              Variant="Variant.Outlined"
                              Margin="Margin.Dense"
                              AutoFocus="false"
                              Class="mobile-input"
                              Style="flex: 1; font-size: 16px;" />
                <MudIconButton Icon="@Icons.Material.Filled.Send"
                               OnClick="SendMessage"
                               Variant="Variant.Filled"
                               Color="Color.Primary"
                               Size="Size.Large" />
            </MudStack>
        </div>
    </div>
</div>


@code {

    string InputMessage;

    bool isGameOwner;

    private MudTextField<string> inputBoxReference;

    private List<string> messages = new List<string>();

    private HubConnection? _messageHubConnection;

    string RoomId;
    string UserId;
    string UserName;
    string GameId;
    string OriginalWord;
    bool IsInRound;
    private bool isKeyboardVisible = false;


    protected async override Task OnInitializedAsync()
    {
        base.OnInitialized();

        await EnsureScrollFunctionExists();
       // await SetupMobileKeyboardHandling();

        var userId = await Js.InvokeAsync<string>("sessionStorage.getItem", "userId");
        var gameOwnerId = await Js.InvokeAsync<string>("sessionStorage.getItem", "ownerUserId");
        var roomId = await Js.InvokeAsync<string>("sessionStorage.getItem", "roomId");
        var username = await Js.InvokeAsync<string>("sessionStorage.getItem", "userName");
        var gameId = await Js.InvokeAsync<string>("sessionStorage.getItem", "gameId");


        RoomId = roomId;
        UserId = userId;
        UserName = username;
        GameId = gameId; 

        if(userId == gameOwnerId)
        {
            isGameOwner = true;
        }

        await StartHubConnection();

        MessageListener();

        await AddToRoom();

        var mesg = $"WordlerBot: Welcome to wordlers game room";
        messages.Add(mesg);

        // Scroll to bottom after initial message
        await ScrollToBottom();
    }


    public void Enter(KeyboardEventArgs e)
    {
        if (e.Code == "Enter" || e.Code == "NumpadEnter")
        {
            if (!string.IsNullOrEmpty(InputMessage))
            {
                SendMessage();
            }
            
        }
    }

    async void SendMessage()
    {
        // var mesg = $"Khelechy: {InputMessage}";
        // messages.Add(mesg);

        if (!string.IsNullOrEmpty(InputMessage))
        {
            var mesgObj = new
            {
                MessageBody = InputMessage,
                RoomId = RoomId,
                GameId = GameId,
                OriginalWord = OriginalWord,
                UserName = UserName,
                UserId = UserId,
                GameType = 1,
            };

            InputMessage = string.Empty;
            inputBoxReference.FocusAsync();

            if (!IsInRound)
            {
                _messageHubConnection?.InvokeAsync("SendRoomMessage", UserName, mesgObj);
            }
            else
            {
                _messageHubConnection?.InvokeAsync("SendUserGameInputMessage", UserName, mesgObj);
            }
        }

    }


    private async Task StartHubConnection()
    {


        var hubDataUrl = ($"{AppConfig.BaseUrl}/roomhub");
        _messageHubConnection = new HubConnectionBuilder()
                        .WithUrl(hubDataUrl)
                        .WithAutomaticReconnect()
                        .Build();


        await _messageHubConnection.StartAsync();
    }

    void MessageListener()
    {
        _messageHubConnection.On<string, string>("ReceiveMessage", (user, message) =>
        {
            var newMessage = $"{user}: {message}";
            messages.Add(newMessage);
            // Force UI update first, then scroll
            InvokeAsync(async () =>
            {
                StateHasChanged();
                await Task.Delay(10); // Small delay to ensure DOM update
                await ScrollToBottom();
            });
        });

        _messageHubConnection.On<bool>("ReceiveGameRoomRoundStatus", (status) =>
       {
           IsInRound = status;
       });

        _messageHubConnection.On<string>("ReceiveGameRoomRoundWord", (scrambledWord) =>
        {
            OriginalWord = scrambledWord;
        });
    }

    async Task AddToRoom()
    {

        await _messageHubConnection?.InvokeAsync("AddToRoom", RoomId, UserName, UserId);
    }

    async Task ProcessStartGame()
    {
        isGameOwner = false;

        var requestObject = new
        {
            GameId = GameId,
            RoomId = RoomId
        };

        string url = $"{AppConfig.BaseUrl}/api/games/start";

        var resp = HttpUtility.MakePost(url, requestObject, null);
       
    }

    private async Task EnsureScrollFunctionExists()
    {
        var script = @"
            if (typeof window.scrollToBottom === 'undefined') {
                window.scrollToBottom = (elementId) => {
                    try {
                        const element = document.getElementById(elementId);
                        if (element) {
                            element.scrollTo({
                                top: element.scrollHeight,
                                behavior: 'smooth'
                            });

                            if (element.scrollTop !== element.scrollHeight) {
                                element.scrollTop = element.scrollHeight;
                            }
                        } else {
                            console.log('Element with id ' + elementId + ' not found');
                        }
                    } catch (error) {
                        console.error('Scroll error:', error);
                    }
                };
            }
        ";

        await Js.InvokeVoidAsync("eval", script);
    }

    private async Task SetupMobileKeyboardHandling()
    {
        var script = @"
            function preventPageScroll() {
                // Prevent any page scrolling
                document.body.style.overflow = 'hidden';
                document.documentElement.style.overflow = 'hidden';

                // Prevent touch scroll events on body
                document.body.addEventListener('touchmove', function(e) {
                    e.preventDefault();
                }, { passive: false });

                // Allow scrolling only in messages container
                var messagesContainer = document.getElementById('messages-container');
                if (messagesContainer) {
                    messagesContainer.addEventListener('touchmove', function(e) {
                        e.stopPropagation();
                    }, { passive: true });
                }
            }

            // Apply immediately
            preventPageScroll();

            // Reapply after any DOM changes
            setTimeout(preventPageScroll, 100);
        ";

        await Js.InvokeVoidAsync("eval", script);

        // Add mobile input styles
        var styleScript = @"
            if (!document.getElementById('mobile-styles')) {
                var style = document.createElement('style');
                style.id = 'mobile-styles';
                style.innerHTML = 'input, textarea { font-size: 16px !important; }';
                document.head.appendChild(style);
            }
        ";

        await Js.InvokeVoidAsync("eval", styleScript);
    }

    private async Task HandleInputFocus()
    {
        isKeyboardVisible = true;
        // Small delay to let keyboard animate in
        await Task.Delay(300);
        await ScrollToBottom();
    }

    private async Task HandleInputBlur()
    {
        isKeyboardVisible = false;
        // Small delay to let keyboard animate out
        await Task.Delay(300);
        StateHasChanged();
    }

    private async Task ScrollToBottom()
    {
        try
        {
            // Ensure we're on the UI thread and DOM is ready
            await InvokeAsync(async () =>
            {
                // Wait for the next render cycle
                await Task.Yield();

                // Additional small delay to ensure DOM is fully updated
                await Task.Delay(5);

                await Js.InvokeVoidAsync("scrollToBottom", "messages-container");
            });
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Scroll error: {ex.Message}");
        }
    }
}
