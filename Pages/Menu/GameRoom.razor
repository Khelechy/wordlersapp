@page "/room/game"
@using Microsoft.AspNetCore.SignalR.Client;
@using WordlersWeb.Helpers
@layout MainLayout
@inject IJSRuntime Js


<PageTitle>Game Room</PageTitle>

<MudStack Style="height: 100vh; position: relative;">

    <!-- Fixed Header -->
    <MudStack Class="d-flex fixed z-20 pt-5" Style="width: 100%; background-color:#32333D">
        <MudButton Class="align-self-start" Variant="Variant.Filled" OnClick="ProcessStartGame" Disabled="!isGameOwner" Color="Color.Primary">Start Game</MudButton>
        <MudText Class="align-self-start" Variant="Variant.Filled" Color="Color.Primary">
            Messages:
        </MudText>
    </MudStack>


    <!-- Messages Content Area -->
    <MudContainer id="messages-container" Style="margin-top: 100px; margin-bottom: 115px; height: calc(100vh - 160px); overflow-y: auto;">
        @if (messages.Count > 0)
        {
            <MudList>
                @foreach (var message in messages)
                {
                    <MudListItem>
                        <MudText>@message</MudText>
                    </MudListItem>
                    <MudDivider DividerType="DividerType.Middle" />
                }
            </MudList>
        }
        else
        {
            <MudText Align="Align.Center" Class="mt-8" Color="Color.Tertiary">
                No messages yet...
            </MudText>
        }
    </MudContainer>

    <!-- Fixed Input Area -->
    <MudPaper Class="pa-3" Style="position: fixed; bottom: 0; left: 0; right: 0; z-index: 1000;">
        <MudStack Row="true" Spacing="2">
            <MudTextField @ref="inputBoxReference"
                          @bind-Value="InputMessage"
                          Immediate="true"
                          @onkeydown="@Enter"
                          Label="Type your message..."
                          Variant="Variant.Outlined"
                          Margin="Margin.Dense"
                          AutoFocus="true"
                          Style="flex: 1;" />
            <MudIconButton Icon="@Icons.Material.Filled.Send"
                           OnClick="SendMessage"
                           Variant="Variant.Filled"
                           Color="Color.Primary"
                           Size="Size.Large" />
        </MudStack>
    </MudPaper>

</MudStack>

@code {

    string InputMessage;

    bool isGameOwner;

    private MudTextField<string> inputBoxReference;

    private List<string> messages = new List<string>();

    private HubConnection? _messageHubConnection;

    string RoomId;
    string UserId;
    string UserName;
    string GameId;
    string OriginalWord;
    bool IsInRound;

    protected async override Task OnInitializedAsync()
    {
        base.OnInitialized();

        var userId = await Js.InvokeAsync<string>("sessionStorage.getItem", "userId");
        var gameOwnerId = await Js.InvokeAsync<string>("sessionStorage.getItem", "ownerUserId");
        var roomId = await Js.InvokeAsync<string>("sessionStorage.getItem", "roomId");
        var username = await Js.InvokeAsync<string>("sessionStorage.getItem", "userName");
        var gameId = await Js.InvokeAsync<string>("sessionStorage.getItem", "gameId");


        RoomId = roomId;
        UserId = userId;
        UserName = username;
        GameId = gameId; 

        if(userId == gameOwnerId)
        {
            isGameOwner = true;
        }

        await StartHubConnection();

        MessageListener();

        await AddToRoom();

        var mesg = $"WordlerBot: Welcome to wordlers game room";
        messages.Add(mesg);

        // Scroll to bottom after initial message
        await ScrollToBottom();
    }


    public void Enter(KeyboardEventArgs e)
    {
        if (e.Code == "Enter" || e.Code == "NumpadEnter")
        {
            if (!string.IsNullOrEmpty(InputMessage))
            {
                SendMessage();
            }
            
        }
    }

    async void SendMessage()
    {
        // var mesg = $"Khelechy: {InputMessage}";
        // messages.Add(mesg);

        var mesgObj = new
        {
            MessageBody = InputMessage,
            RoomId = RoomId,
            GameId = GameId,
            OriginalWord = OriginalWord,
            UserName = UserName,
            UserId = UserId,
            GameType = 1,
        };

        InputMessage = string.Empty;
        inputBoxReference.FocusAsync();

        if (!IsInRound)
        {
            _messageHubConnection?.InvokeAsync("SendRoomMessage", UserName, mesgObj);
        }
        else
        {
            _messageHubConnection?.InvokeAsync("SendUserGameInputMessage", UserName, mesgObj);
        }

    }


    private async Task StartHubConnection()
    {


        var hubDataUrl = ($"{AppConfig.BaseUrl}/roomhub");
        _messageHubConnection = new HubConnectionBuilder()
                        .WithUrl(hubDataUrl)
                        .WithAutomaticReconnect()
                        .Build();


        await _messageHubConnection.StartAsync();
    }

    void MessageListener()
    {
        _messageHubConnection.On<string, string>("ReceiveMessage", (user, message) =>
        {
            var newMessage = $"{user}: {message}";
            messages.Add(newMessage);
            StateHasChanged();

            // Auto-scroll to bottom when new message arrives
            _ = Task.Run(async () => await ScrollToBottom());
        });

        _messageHubConnection.On<bool>("ReceiveGameRoomRoundStatus", (status) =>
       {
           IsInRound = status;
       });

        _messageHubConnection.On<string>("ReceiveGameRoomRoundWord", (scrambledWord) =>
        {
            OriginalWord = scrambledWord;
        });
    }

    async Task AddToRoom()
    {

        await _messageHubConnection?.InvokeAsync("AddToRoom", RoomId, UserName, UserId);
    }

    async Task ProcessStartGame()
    {
        isGameOwner = false;

        var requestObject = new
        {
            GameId = GameId,
            RoomId = RoomId
        };

        string url = $"{AppConfig.BaseUrl}/api/games/start";

        var resp = HttpUtility.MakePost(url, requestObject, null);
       
    }

    private async Task ScrollToBottom()
    {
        try
        {
            await Task.Delay(50); // Small delay to ensure DOM is updated
            await Js.InvokeVoidAsync("scrollToBottom", "messages-container");
        }
        catch (Exception ex)
        {
            // Handle any JS interop errors silently
            Console.WriteLine($"Scroll error: {ex.Message}");
        }
    }
}
