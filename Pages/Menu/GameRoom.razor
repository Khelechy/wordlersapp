@page "/room/game"
@using Microsoft.AspNetCore.SignalR.Client;
@using WordlersWeb.Helpers
@layout MainLayout
@inject IJSRuntime Js
@inject NavigationManager NavigationManager


<PageTitle>Game Room</PageTitle>

<style>
    .game-room-main-content {
        padding: 0 !important;
        margin: 0 !important;
        overflow: hidden !important;
        height: 100vh !important;
        position: relative !important;
    }

    .game-room-wrapper {
        position: fixed;
        top: 64px; /* Height of MudAppBar */
        left: 0;
        right: 0;
        bottom: 0;
        overflow: hidden;
        background: var(--mud-palette-background);
        display: flex;
        flex-direction: column;
    }

    @@media (min-width: 960px) {
        .game-room-wrapper {
            left: 240px; /* Width of MudDrawer on desktop */
        }
    }

    .game-header {
        position: relative;
        background-color: #32333D;
        padding: 12px 16px;
        box-shadow: 0 2px 4px rgba(0,0,0,0.1);
        z-index: 200;
        flex-shrink: 0;
        min-height: 90px;
    }

    .messages-area {
        flex: 1;
        overflow: hidden;
        padding: 16px;
        -webkit-overflow-scrolling: touch;
        background: transparent;
        display: flex;
        flex-direction: column;
    }

    .fixed-input {
        position: relative;
        background: #32323c;
        padding: 12px;
        box-shadow: 0 -2px 4px rgba(0,0,0,0.1);
        flex-shrink: 0;
        z-index: 1000;
    }

    @@media (max-width: 959px) {
        .game-room-wrapper {
            left: 0; /* No drawer offset on mobile */
        }
        
        .game-header {
            padding: 8px 12px;
            min-height: 70px;
        }
        
        .messages-area {
            padding: 12px;
        }
        
        .fixed-input {
            padding: 8px;
        }
    }

    /* Handle very short screens (keyboard visible) */
    @@media (max-height: 500px) {
        .game-header {
            min-height: 50px;
            padding: 4px 12px;
        }
        
        .messages-area {
            padding: 8px 12px;
        }
        
        .fixed-input {
            padding: 6px 8px;
        }
    }

    /* Prevent zoom on input focus */
    .mobile-input input {
        font-size: 16px !important;
    }

    /* Ensure smooth scrolling */
    .messages-area {
        scroll-behavior: smooth;
    }

    /* Auto-scroll messages to bottom */
    .messages-list {
        display: flex;
        flex-direction: column;
        min-height: 100%;
        justify-content: flex-end;
        overflow-y: auto; /* This container scrolls */
        overflow-x: hidden;
        -webkit-overflow-scrolling: touch;
        scroll-behavior: smooth;
    }

    /* Mobile keyboard handling */
    @@supports (height: 100dvh) {
        .game-room-wrapper {
            height: calc(100dvh - 64px);
        }
    }

    /* Ensure MudAppBar and drawer work properly */
    .mud-appbar {
        position: fixed !important;
        top: 0 !important;
        left: 0 !important;
        right: 0 !important;
        z-index: 1300 !important;
    }

    .mud-drawer {
        top: 64px !important;
    }
</style>

<div class="game-room-wrapper">
    <!-- Fixed Header -->

    <div class="game-header">
        <div style="display: flex; justify-content: space-between; align-items: center; width: 100%;">
            <MudButton Variant="Variant.Filled" OnClick="ProcessStartGame"
                       Disabled="!isGameOwner" Color="Color.Primary" Size="Size.Small">
                Start Game
            </MudButton>
        </div>
        @if (!string.IsNullOrEmpty(OriginalWord))
        {
            <MudText Align="Align.Center" Class="mt-4" Color="Color.Tertiary">
                *@OriginalWord*
            </MudText>
        }
    </div>

    <!-- Messages Content Area -->
    <div id="messages-container" class="messages-area">
       <div class="messages-list">
            @if (messages.Count > 0)
            {
                <MudList Dense="true">
                    @foreach (var message in messages)
                    {
                        <MudListItem Class="px-2 py-1">
                            <MudText Typo="Typo.body2">@message</MudText>
                        </MudListItem>
                        <MudDivider DividerType="DividerType.Middle" />
                    }
                </MudList>
            }
            else
            {
               <div style="display: flex; align-items: center; height: 100%;">
                    <MudText Align="Align.Center" Color="Color.Tertiary">
                        No messages yet...
                    </MudText>
               </div>
            }
       </div>
    </div>

    <!-- Fixed Input Area -->
    <div class="fixed-input">
        @if (!string.IsNullOrEmpty(OriginalWord))
        {
            <MudText Align="Align.Center" Class="mt-2" Color="Color.Tertiary">
                *@OriginalWord*
            </MudText>
        }
        <MudStack Row="true" Spacing="2" AlignItems="AlignItems.Center">
            <MudTextField @ref="inputBoxReference"
                          @bind-Value="InputMessage"
                          Immediate="true"
                          @onkeydown="@Enter"
                          @onfocus="HandleInputFocus"
                          @onblur="HandleInputBlur"
                          Label=""
                          Variant="Variant.Outlined"
                          Margin="Margin.Dense"
                          AutoFocus="false"
                          Class="mobile-input"
                          Style="flex: 1; font-size: 16px;" />
            <MudIconButton Icon="@Icons.Material.Filled.Send"
                           OnClick="SendMessage"
                           Variant="Variant.Filled"
                           Color="Color.Primary"
                           Size="Size.Medium" 
                           Disabled="@string.IsNullOrWhiteSpace(InputMessage)" />
        </MudStack>
    </div>
</div>


@code {

    string InputMessage;

    bool isGameOwner;

    private MudTextField<string> inputBoxReference;

    private List<string> messages = new List<string>();

    private HubConnection? _messageHubConnection;

    string RoomId;
    string UserId;
    string UserName;
    string GameId;
    string OriginalWord;
    bool IsInRound;
    private bool isKeyboardVisible = false;


    protected async override Task OnInitializedAsync()
    {
        base.OnInitialized();

        await SetupMobileOptimizations();

        await EnsureScrollFunctionExists();
        // await SetupMobileKeyboardHandling();

        var userId = await Js.InvokeAsync<string>("sessionStorage.getItem", "userId");
        var gameOwnerId = await Js.InvokeAsync<string>("sessionStorage.getItem", "ownerUserId");
        var roomId = await Js.InvokeAsync<string>("sessionStorage.getItem", "roomId");
        var username = await Js.InvokeAsync<string>("sessionStorage.getItem", "userName");
        var gameId = await Js.InvokeAsync<string>("sessionStorage.getItem", "gameId");


        RoomId = roomId;
        UserId = userId;
        UserName = username;
        GameId = gameId; 

        if(userId == gameOwnerId)
        {
            isGameOwner = true;
        }

        await StartHubConnection();

        MessageListener();

        await AddToRoom();

        var mesg = $"WordlerBot: Welcome to wordlers game room";
        messages.Add(mesg);

        // Scroll to bottom after initial message
        await ScrollToBottom();
    }


    public void Enter(KeyboardEventArgs e)
    {
        if (e.Code == "Enter" || e.Code == "NumpadEnter")
        {
            if (!string.IsNullOrEmpty(InputMessage))
            {
                SendMessage();
            }

        }
    }

    async void SendMessage()
    {
        // var mesg = $"Khelechy: {InputMessage}";
        // messages.Add(mesg);

        if (!string.IsNullOrEmpty(InputMessage))
        {
            var mesgObj = new
            {
                MessageBody = InputMessage,
                RoomId = RoomId,
                GameId = GameId,
                OriginalWord = OriginalWord,
                UserName = UserName,
                UserId = UserId,
                GameType = 1,
            };

            InputMessage = string.Empty;
            inputBoxReference.FocusAsync();

            if (!IsInRound)
            {
                _messageHubConnection?.InvokeAsync("SendRoomMessage", UserName, mesgObj);
            }
            else
            {
                _messageHubConnection?.InvokeAsync("SendUserGameInputMessage", UserName, mesgObj);
            }
        }

    }


    private async Task StartHubConnection()
    {


        var hubDataUrl = ($"{AppConfig.BaseUrl}/roomhub");
        _messageHubConnection = new HubConnectionBuilder()
                        .WithUrl(hubDataUrl)
                        .WithAutomaticReconnect()
                        .Build();


        await _messageHubConnection.StartAsync();
    }

    void MessageListener()
    {
        _messageHubConnection.On<string, string>("ReceiveMessage", (user, message) =>
        {
            var newMessage = $"{user}: {message}";
            messages.Add(newMessage);
            // Force UI update first, then scroll
            InvokeAsync(async () =>
            {
                StateHasChanged();
                await Task.Delay(10); // Small delay to ensure DOM update
                await ScrollToBottom();
            });
        });

        _messageHubConnection.On<bool>("ReceiveGameRoomRoundStatus", (status) =>
       {
           IsInRound = status;
           if(status == false)
           {
               OriginalWord = string.Empty;
           }
       });

        _messageHubConnection.On<string>("ReceiveGameRoomRoundWord", (scrambledWord) =>
        {
            OriginalWord = scrambledWord;
        });
    }

    async Task AddToRoom()
    {

        await _messageHubConnection?.InvokeAsync("AddToRoom", RoomId, UserName, UserId);
    }

    async Task ProcessStartGame()
    {
        isGameOwner = false;

        var requestObject = new
        {
            GameId = GameId,
            RoomId = RoomId
        };

        string url = $"{AppConfig.BaseUrl}/api/games/start";

        var resp = HttpUtility.MakePost(url, requestObject, null);

    }

    private async Task SetupMobileOptimizations()
    {
        var script = @"
             function setupMobileOptimizations() {
                // Handle viewport changes for mobile keyboard
                function setViewportHeight() {
                    const vh = window.innerHeight * 0.01;
                    document.documentElement.style.setProperty('--vh', vh + 'px');
                }

                setViewportHeight();
                window.addEventListener('resize', setViewportHeight);
                window.addEventListener('orientationchange', () => {
                    setTimeout(setViewportHeight, 100);
                });

                // Prevent unwanted scrolling but allow in messages container
                document.body.addEventListener('touchmove', function(e) {
                    const messagesContainer = document.getElementById('messages-container');
                    if (messagesContainer && !messagesContainer.contains(e.target)) {
                        e.preventDefault();
                    }
                }, { passive: false });

                // Prevent bounce scrolling on iOS
                document.addEventListener('touchmove', function(e) {
                    if (e.scale !== 1) { e.preventDefault(); }
                }, { passive: false });
            }

            setupMobileOptimizations();
        ";
        
        await Js.InvokeVoidAsync("eval", script);
    }

    // private async Task EnsureScrollFunctionExists()
    // {
    //     var script = @"
    //         if (typeof window.scrollToBottom === 'undefined') {
    //             window.scrollToBottom = (elementId) => {
    //                 try {
    //                     const element = document.getElementById(elementId);
    //                     if (element) {
    //                         element.scrollTo({
    //                             top: element.scrollHeight,
    //                             behavior: 'smooth'
    //                         });

    //                         if (element.scrollTop !== element.scrollHeight) {
    //                             element.scrollTop = element.scrollHeight;
    //                         }
    //                     } else {
    //                         console.log('Element with id ' + elementId + ' not found');
    //                     }
    //                 } catch (error) {
    //                     console.error('Scroll error:', error);
    //                 }
    //             };
    //         }
    //     ";

    //     await Js.InvokeVoidAsync("eval", script);
    // }

    private async Task EnsureScrollFunctionExists()
    {
        var script = @"
            if (typeof window.scrollToBottom === 'undefined') {
                window.scrollToBottom = (elementId) => {
                    try {
                        // Find the messages-list element inside the container
                        const container = document.getElementById(elementId);
                        if (container) {
                            const messagesList = container.querySelector('.messages-list');
                            if (messagesList) {
                                messagesList.scrollTo({
                                    top: messagesList.scrollHeight,
                                    behavior: 'smooth'
                                });

                                // Fallback for browsers that don't support smooth scrolling
                                if (messagesList.scrollTop !== messagesList.scrollHeight) {
                                    messagesList.scrollTop = messagesList.scrollHeight;
                                }
                            }
                        } else {
                            console.log('Element with id ' + elementId + ' not found');
                        }
                    } catch (error) {
                        console.error('Scroll error:', error);
                    }
                };
            }
        ";

        await Js.InvokeVoidAsync("eval", script);
    }

    private async Task SetupMobileKeyboardHandling()
    {
        var script = @"
            function preventPageScroll() {
                // Prevent any page scrolling
                document.body.style.overflow = 'hidden';
                document.documentElement.style.overflow = 'hidden';

                // Prevent touch scroll events on body
                document.body.addEventListener('touchmove', function(e) {
                    e.preventDefault();
                }, { passive: false });

                // Allow scrolling only in messages container
                var messagesContainer = document.getElementById('messages-container');
                if (messagesContainer) {
                    messagesContainer.addEventListener('touchmove', function(e) {
                        e.stopPropagation();
                    }, { passive: true });
                }
            }

            // Apply immediately
            preventPageScroll();

            // Reapply after any DOM changes
            setTimeout(preventPageScroll, 100);
        ";

        await Js.InvokeVoidAsync("eval", script);

        // Add mobile input styles
        var styleScript = @"
            if (!document.getElementById('mobile-styles')) {
                var style = document.createElement('style');
                style.id = 'mobile-styles';
                style.innerHTML = 'input, textarea { font-size: 16px !important; }';
                document.head.appendChild(style);
            }
        ";

        await Js.InvokeVoidAsync("eval", styleScript);
    }

    private async Task HandleInputFocus()
    {
        isKeyboardVisible = true;
        // Small delay to let keyboard animate in
        await Task.Delay(300);
        await ScrollToBottom();
    }

    private async Task HandleInputBlur()
    {
        isKeyboardVisible = false;
        // Small delay to let keyboard animate out
        await Task.Delay(300);
        StateHasChanged();
    }

    private async Task ScrollToBottom()
    {
        try
        {
            // Ensure we're on the UI thread and DOM is ready
            await InvokeAsync(async () =>
            {
                // Wait for the next render cycle
                await Task.Yield();

                // Additional small delay to ensure DOM is fully updated
                await Task.Delay(5);

                await Js.InvokeVoidAsync("scrollToBottom", "messages-container");
            });
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Scroll error: {ex.Message}");
        }
    }
}
